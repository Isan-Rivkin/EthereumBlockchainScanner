#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ethereumblockchainscanner:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
// initialize socket io.
var io = require('socket.io')(server);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
  debug('Listening on ' + bind);
}

// all modules that require IO object
var scanner_module = require('../routes/scanner_router');
var entitites_caching_router = require('../routes/entities_caching_router');
var miners_router = require('../routes/miners_map_router');
scanner_module.setIO(io);
entitites_caching_router.setIO(io);
miners_router.setIO(io);
//socket.io
// http = require('http').Server(app);
// let  io = require('socket.io')(http);
//
// io.on('connection', (socket) => {
//     console.log('user connected');
//     //io.emit('connection', "connection");
//
//     socket.on('disconnect', function(){
//         console.log('user disconnected');
//     });
//
//     socket.on('get-transactions', () => {
//         // Get content from file
//         var contents = fs.readFileSync("./logic/data/test-data.json");
//         // Define to JSON type
//         var jsonContent = JSON.parse(contents);
//         console.log(jsonContent);
//         io.emit('transactions', jsonContent);
//     });
// });
